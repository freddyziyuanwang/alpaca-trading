{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNDNkapE1WoORAtdnzDxKr8"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ngSlhX9SyUe8","executionInfo":{"status":"ok","timestamp":1743538839327,"user_tz":240,"elapsed":594,"user":{"displayName":"Freddy","userId":"16403082426040861433"}},"outputId":"ead1dd14-001e-4b26-d49a-62c84780edee"},"outputs":[{"output_type":"stream","name":"stdout","text":["✅ 成功连接到 Alpaca Paper Trading！\n","🧠 账户状态: ACTIVE\n","💰 当前可用资金: $1000000\n","📊 总账户权益: $1000000\n"]}],"source":["import alpaca_trade_api as tradeapi\n","\n","# 填入你的密钥\n","API_KEY = ''\n","SECRET_KEY = ''\n","BASE_URL = ''\n","\n","# 初始化 API 客户端\n","api = tradeapi.REST(API_KEY, SECRET_KEY, BASE_URL, api_version='v2')\n","\n","# 获取账户信息\n","account = api.get_account()\n","\n","print(\"✅ 成功连接到 Alpaca Paper Trading！\")\n","print(f\"🧠 账户状态: {account.status}\")\n","print(f\"💰 当前可用资金: ${account.cash}\")\n","print(f\"📊 总账户权益: ${account.equity}\")\n","\n","\n"]},{"cell_type":"code","source":["def connect_alpaca():\n","    api = tradeapi.REST(API_KEY, SECRET_KEY, BASE_URL, api_version='v2')\n","    print(\"✅ 成功连接 Alpaca！\")\n","    return api\n","    api = connect_alpaca()\n","\n","api = connect_alpaca()\n","\n","def get_price(symbol='AAPL'):\n","    barset = api.get_bars(symbol, timeframe='1Min', limit=1)\n","    return barset[0].c\n","\n","# 测试\n","print(\"📈 当前 AAPL 价格为：\", get_price())\n","\n","# 测试\n","print(\"📈 当前 AAPL 价格为：\", get_price())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LqGJ_X6B75Eh","executionInfo":{"status":"ok","timestamp":1743538846886,"user_tz":240,"elapsed":748,"user":{"displayName":"Freddy","userId":"16403082426040861433"}},"outputId":"351c77bd-c9a4-4479-a468-4cc2bc3d0925"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["✅ 成功连接 Alpaca！\n","📈 当前 AAPL 价格为： 221.41\n","📈 当前 AAPL 价格为： 221.41\n"]}]},{"cell_type":"code","source":["# order_executor.py\n","from alpaca_trade_api import REST\n","import time\n","\n","# ✅ 用你自己的密钥初始化（或从 connect_alpaca 中导入）\n","API_KEY = ''\n","SECRET_KEY = ''\n","BASE_URL = ''\n","\n","api = REST(API_KEY, SECRET_KEY, BASE_URL, api_version='v2')\n","\n","# ✅ 组合订单（Bracket Order）防止 wash trade\n","\n","def place_bracket_order(symbol=\"AAPL\", qty=1, take_profit_price=230, stop_loss_price=210):\n","    try:\n","        order = api.submit_order(\n","            symbol=symbol,\n","            qty=qty,\n","            side='buy',\n","            type='market',\n","            time_in_force='gtc',\n","            order_class='bracket',\n","            take_profit={'limit_price': take_profit_price},\n","            stop_loss={'stop_price': stop_loss_price}\n","        )\n","        print(f\"✅ 已提交 Bracket 买入订单：{qty} 股 {symbol}，止盈：{take_profit_price}，止损：{stop_loss_price}\")\n","        return order\n","    except Exception as e:\n","        print(f\"❌ 下单失败：{e}\")\n","\n","# ✅ 查询当前持仓\n","def check_position(symbol=\"AAPL\"):\n","    try:\n","        position = api.get_position(symbol)\n","        print(f\"📊 当前持仓：{position.qty} 股 {symbol}\")\n","        return position\n","    except Exception:\n","        print(f\"📉 当前没有持有 {symbol}\")\n","        return None\n","\n","# ✅ 查询订单历史\n","def list_orders(symbol=\"AAPL\"):\n","    orders = api.list_orders(status='all', limit=5, symbols=[symbol])\n","    print(\"📄 最近订单：\")\n","    for o in orders:\n","        price_display = o.filled_avg_price if o.filled_avg_price else 'Pending'\n","        print(f\"{o.side.upper()} {o.qty} 股 @ {price_display} → 状态：{o.status}\")\n","    return orders\n","\n","# ✅ 自动下单测试（带冷却保护）\n","def smart_trade(symbol=\"AAPL\"):\n","    position = check_position(symbol)\n","    if not position:\n","        place_bracket_order(symbol, qty=1, take_profit_price=230, stop_loss_price=210)\n","        time.sleep(10)\n","        check_position(symbol)\n","        list_orders(symbol)\n","    else:\n","        print(f\"🚫 已持仓 {symbol}，跳过下单\")\n","    # 🟢 调用函数进行实盘下单测试\n","smart_trade(\"AAPL\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"i3tIgu1480PM","executionInfo":{"status":"ok","timestamp":1743538865128,"user_tz":240,"elapsed":11204,"user":{"displayName":"Freddy","userId":"16403082426040861433"}},"outputId":"4068594a-163d-4570-b529-39bb65b5c505"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["📉 当前没有持有 AAPL\n","✅ 已提交 Bracket 买入订单：1 股 AAPL，止盈：230，止损：210\n","📉 当前没有持有 AAPL\n","📄 最近订单：\n","SELL 1 股 @ Pending → 状态：held\n","BUY 1 股 @ Pending → 状态：accepted\n","SELL 1 股 @ Pending → 状态：held\n","BUY 1 股 @ Pending → 状态：accepted\n","SELL 1 股 @ Pending → 状态：held\n"]}]},{"cell_type":"code","source":["# strategy_engine.py\n","import pandas as pd\n","from alpaca_trade_api import REST\n","\n","API_KEY = ''\n","SECRET_KEY = ''\n","BASE_URL = ''\n","\n","api = REST(API_KEY, SECRET_KEY, BASE_URL, api_version='v2')\n","\n","# ✅ 获取历史数据用于策略判断（例如 MA、RSI、MACD）\n","def get_historical_data(symbol=\"AAPL\", timeframe='1Min', limit=100):\n","    bars = api.get_bars(symbol, timeframe=timeframe, limit=limit)\n","    df = pd.DataFrame([{\n","        'time': bar.t,\n","        'open': bar.o,\n","        'high': bar.h,\n","        'low': bar.l,\n","        'close': bar.c,\n","        'volume': bar.v\n","    } for bar in bars])\n","    df.set_index('time', inplace=True)\n","    return df\n","\n","# ✅ 增强信号引擎：融合 MA、RSI、MACD\n","\n","def generate_signals(df):\n","    df['MA20'] = df['close'].rolling(window=20).mean()\n","    df['MA50'] = df['close'].rolling(window=50).mean()\n","\n","    # RSI（14）计算\n","    delta = df['close'].diff()\n","    gain = delta.where(delta > 0, 0)\n","    loss = -delta.where(delta < 0, 0)\n","    avg_gain = gain.rolling(window=14).mean()\n","    avg_loss = loss.rolling(window=14).mean()\n","    rs = avg_gain / avg_loss\n","    df['RSI'] = 100 - (100 / (1 + rs))\n","\n","    # MACD计算（12/26 EMA）\n","    ema12 = df['close'].ewm(span=12, adjust=False).mean()\n","    ema26 = df['close'].ewm(span=26, adjust=False).mean()\n","    df['MACD'] = ema12 - ema26\n","    df['SignalLine'] = df['MACD'].ewm(span=9, adjust=False).mean()\n","\n","    df.dropna(inplace=True)\n","\n","    latest = df.iloc[-1]\n","    prev = df.iloc[-2]\n","\n","    # MA 信号\n","    ma_signal = None\n","    if latest['MA20'] > latest['MA50'] and prev['MA20'] <= prev['MA50']:\n","        ma_signal = 'buy'\n","    elif latest['MA20'] < latest['MA50'] and prev['MA20'] >= prev['MA50']:\n","        ma_signal = 'sell'\n","    else:\n","        ma_signal = 'hold'\n","\n","    # RSI 信号\n","    rsi_signal = 'buy' if latest['RSI'] < 30 else ('sell' if latest['RSI'] > 70 else 'hold')\n","\n","    # MACD 信号\n","    macd_signal = 'buy' if latest['MACD'] > latest['SignalLine'] and prev['MACD'] <= prev['SignalLine'] else \\\n","                  'sell' if latest['MACD'] < latest['SignalLine'] and prev['MACD'] >= prev['SignalLine'] else 'hold'\n","\n","    # 多因子融合：双重确认才交易\n","    if ma_signal == 'buy' and rsi_signal == 'buy' and macd_signal == 'buy':\n","        signal = 'buy'\n","    elif ma_signal == 'sell' and rsi_signal == 'sell' and macd_signal == 'sell':\n","        signal = 'sell'\n","    else:\n","        signal = 'hold'\n","\n","    return signal, ma_signal, rsi_signal, macd_signal\n","\n","# ✅ 外部接口：获取融合信号结果\n","def get_current_signal(symbol=\"AAPL\"):\n","    df = get_historical_data(symbol)\n","    signal, ma, rsi, macd = generate_signals(df)\n","    print(f\"📡 当前信号（{symbol}）: {signal.upper()}  [MA: {ma}, RSI: {rsi}, MACD: {macd}]\")\n","    return signal\n"],"metadata":{"id":"s_0kvRL4ADzH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# main_live.py\n","import time\n","from strategy_engine import get_current_signal\n","from order_executor import smart_trade, check_position, place_sell_order\n","\n","SYMBOL = \"AAPL\"\n","INTERVAL_SECONDS = 60  # 每轮执行间隔（秒）\n","\n","print(\"🚀 自动化交易系统已启动...\")\n","\n","while True:\n","    try:\n","        signal = get_current_signal(SYMBOL)\n","\n","        if signal == 'buy':\n","            position = check_position(SYMBOL)\n","            if not position:\n","                print(\"🟢 触发买入逻辑...\")\n","                smart_trade(SYMBOL)\n","            else:\n","                print(\"⚠️ 已持仓，跳过买入\")\n","\n","        elif signal == 'sell':\n","            position = check_position(SYMBOL)\n","            if position:\n","                print(\"🔴 触发卖出逻辑...\")\n","                place_sell_order(SYMBOL, int(position.qty))\n","            else:\n","                print(\"⚠️ 无持仓，跳过卖出\")\n","\n","        else:\n","            print(\"⏸ 当前为持有信号，等待下一轮...\")\n","\n","    except Exception as e:\n","        print(f\"❌ 系统运行错误：{e}\")\n","\n","    time.sleep(INTERVAL_SECONDS)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":395},"id":"H8NZhN-OAkCs","executionInfo":{"status":"error","timestamp":1743538879499,"user_tz":240,"elapsed":29,"user":{"displayName":"Freddy","userId":"16403082426040861433"}},"outputId":"d71ced8f-363a-4d62-8da3-016f8635b786"},"execution_count":null,"outputs":[{"output_type":"error","ename":"ModuleNotFoundError","evalue":"No module named 'strategy_engine'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m<ipython-input-39-b5ae09b351fa>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# main_live.py\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mtime\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mstrategy_engine\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mget_current_signal\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0morder_executor\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0msmart_trade\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcheck_position\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mplace_sell_order\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'strategy_engine'","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"],"errorDetails":{"actions":[{"action":"open_url","actionText":"Open Examples","url":"/notebooks/snippets/importing_libraries.ipynb"}]}}]},{"cell_type":"code","source":["!python main_live.py"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"beH8SiQrAn7o","executionInfo":{"status":"ok","timestamp":1743538888074,"user_tz":240,"elapsed":117,"user":{"displayName":"Freddy","userId":"16403082426040861433"}},"outputId":"134bd8b8-7b01-4aa0-b0de-da8c3ce4b1c2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["python3: can't open file '/content/main_live.py': [Errno 2] No such file or directory\n"]}]}]}