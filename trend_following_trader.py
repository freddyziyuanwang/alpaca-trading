{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"135yXWYxD5oLGY1F7o2WZOokNsW0Etr2Q","timestamp":1743532437381}],"authorship_tag":"ABX9TyMh+7eJNaXD6ZQmwwqHAHp0"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["!pip install yfinance matplotlib pandas"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dcHpxgvspBuu","executionInfo":{"status":"ok","timestamp":1743532889109,"user_tz":240,"elapsed":3617,"user":{"displayName":"Freddy","userId":"16403082426040861433"}},"outputId":"485b4bc8-d89e-45cd-cca6-bb3ba9f5c596"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: yfinance in /usr/local/lib/python3.11/dist-packages (0.2.55)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (3.10.0)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.2)\n","Requirement already satisfied: numpy>=1.16.5 in /usr/local/lib/python3.11/dist-packages (from yfinance) (2.0.2)\n","Requirement already satisfied: requests>=2.31 in /usr/local/lib/python3.11/dist-packages (from yfinance) (2.32.3)\n","Requirement already satisfied: multitasking>=0.0.7 in /usr/local/lib/python3.11/dist-packages (from yfinance) (0.0.11)\n","Requirement already satisfied: platformdirs>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from yfinance) (4.3.7)\n","Requirement already satisfied: pytz>=2022.5 in /usr/local/lib/python3.11/dist-packages (from yfinance) (2025.2)\n","Requirement already satisfied: frozendict>=2.3.4 in /usr/local/lib/python3.11/dist-packages (from yfinance) (2.4.6)\n","Requirement already satisfied: peewee>=3.16.2 in /usr/local/lib/python3.11/dist-packages (from yfinance) (3.17.9)\n","Requirement already satisfied: beautifulsoup4>=4.11.1 in /usr/local/lib/python3.11/dist-packages (from yfinance) (4.13.3)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.3.1)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (4.56.0)\n","Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.4.8)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (24.2)\n","Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (11.1.0)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (3.2.3)\n","Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (2.8.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n","Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.11/dist-packages (from beautifulsoup4>=4.11.1->yfinance) (2.6)\n","Requirement already satisfied: typing-extensions>=4.0.0 in /usr/local/lib/python3.11/dist-packages (from beautifulsoup4>=4.11.1->yfinance) (4.13.0)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.7->matplotlib) (1.17.0)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests>=2.31->yfinance) (3.4.1)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests>=2.31->yfinance) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests>=2.31->yfinance) (2.3.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests>=2.31->yfinance) (2025.1.31)\n"]}]},{"cell_type":"code","source":["# 用户输入参数\n","ticker = \"AAPL\"                      # 股票代码（必须是大写，比如 AAPL）\n","start_date = \"2022-01-01\"           # 起始日期\n","end_date = \"2023-01-01\"             # 结束日期\n","initial_capital = 100               # 初始本金（可随便改）\n"],"metadata":{"id":"GPO_AL1IpIOX","executionInfo":{"status":"ok","timestamp":1743532900512,"user_tz":240,"elapsed":5,"user":{"displayName":"Freddy","userId":"16403082426040861433"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["# trend_following_trader.py\n","\n","import yfinance as yf\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from datetime import datetime, timedelta\n","\n","# → 请注意：MA50需要足够日期本，我们自动提前60天，同时检查日期合理性\n","\n","def fetch_data(ticker, start_date, end_date):\n","    try:\n","        df = yf.download(ticker, start=start_date, end=end_date)\n","        if df.empty:\n","            raise ValueError(\"下载数据为空，请检查股票代码或网络连接\")\n","    except Exception as e:\n","        print(f\"❌ 数据获取失败：{e}\")\n","        return None\n","\n","    if df['MA5'].iloc[i] > df['MA15'].iloc[i] and df['MA5'].iloc[i-1] <= df['MA15'].iloc[i-1]:\n","      signals.append(\"buy\")\n","    elif df['MA5'].iloc[i] < df['MA15'].iloc[i] and df['MA5'].iloc[i-1] >= df['MA15'].iloc[i-1]:\n","      signals.append(\"sell\")\n","\n","    df.dropna(inplace=True)\n","    return df\n","\n","def generate_signals(df):\n","    signals = []\n","    for i in range(1, len(df)):\n","        if df['MA20'].iloc[i] > df['MA50'].iloc[i] and df['MA20'].iloc[i-1] <= df['MA50'].iloc[i-1]:\n","            signals.append(\"buy\")\n","        elif df['MA20'].iloc[i] < df['MA50'].iloc[i] and df['MA20'].iloc[i-1] >= df['MA50'].iloc[i-1]:\n","            signals.append(\"sell\")\n","        else:\n","            signals.append(\"hold\")\n","    signals.insert(0, \"hold\")\n","    df['Signal'] = signals\n","    return df\n","\n","def simulate_trading(df, initial_capital):\n","    capital = initial_capital\n","    position = 0\n","    daily_log = []\n","    stop_loss = 0.8 * initial_capital\n","    take_profit = 1.5 * initial_capital\n","\n","    for i in range(len(df)):\n","        price = df['Close'].iloc[i]\n","        signal = str(df['Signal'].iloc[i])  # 强制转换成 str，避免报错\n","        date = df.index[i]\n","\n","        # Access the raw numeric value of price using .item()\n","        if signal == 'buy' and capital >= price.item():\n","            position += 1\n","            capital -= price.item()  # Also use .item() when updating capital\n","        elif signal == 'sell' and position > 0:\n","            capital += position * price.item()  # Use .item() here as well\n","            position = 0\n","\n","        total_value = capital + position * price.item()  # Use .item() here too\n","        daily_log.append({\n","            'Date': date,\n","            'Price': price,\n","            'Signal': signal,\n","            'Capital': capital,\n","            'Position': position,\n","            'Total_Value': total_value\n","        })\n","\n","        # Use .item() to get a single value for comparison\n","        if total_value <= stop_loss:\n","            print(f\"[STOP LOSS] Triggered on {date}. Total Value: ${total_value:.2f}\")\n","            break\n","        if total_value >= take_profit:\n","            print(f\"[TAKE PROFIT] Triggered on {date}. Total Value: ${total_value:.2f}\")\n","            break\n","\n","    return pd.DataFrame(daily_log)\n","\n","def plot_results(log_df):\n","    plt.figure(figsize=(12, 6))\n","    plt.plot(log_df['Date'], log_df['Total_Value'], label='Portfolio Value')\n","    plt.xlabel('Date')\n","    plt.ylabel('Total Value (USD)')\n","    plt.title('Simulated Portfolio Value Over Time')\n","    plt.grid()\n","    plt.legend()\n","    plt.tight_layout()\n","    plt.show()\n","\n","if __name__ == \"__main__\":\n","    print(\"\\n⚠️ 请选择 start date 和 end date，时间间隔建议至少 60 天以上（因使用 MA50）\\n\")\n","    ticker = input(\"Enter stock ticker (e.g., AAPL): \").upper()\n","    start_date_input = input(\"Enter start date (YYYY-MM-DD): \")\n","    end_date = input(\"Enter end date (YYYY-MM-DD): \")\n","\n","    # 检查日期间隔是否合理\n","    start_dt = datetime.strptime(start_date_input, \"%Y-%m-%d\")\n","    end_dt = datetime.strptime(end_date, \"%Y-%m-%d\")\n","    if (end_dt - start_dt).days < 60:\n","        print(\"❌ 日期间隔过短，请选择至少 60 天的数据范围！\")\n","        exit()\n","\n","    # 实际获取数据的日期提前60天\n","    start_date = (start_dt - timedelta(days=60)).strftime(\"%Y-%m-%d\")\n","\n","    initial_capital = float(input(\"Enter initial capital (e.g., 100): \"))\n","\n","    df = fetch_data(ticker, start_date, end_date)\n","    if df is not None:\n","        df = generate_signals(df)\n","        log_df = simulate_trading(df, initial_capital)\n","        plot_results(log_df)\n","        log_df.to_csv(f\"{ticker}_trade_log.csv\", index=False)\n","        print(f\"Log exported to {ticker}_trade_log.csv\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":519},"id":"5a2QW88rp_1z","executionInfo":{"status":"ok","timestamp":1743533150692,"user_tz":240,"elapsed":14224,"user":{"displayName":"Freddy","userId":"16403082426040861433"}},"outputId":"44e442fd-e546-4024-fa67-0c421ffd5795"},"execution_count":9,"outputs":[{"name":"stdout","output_type":"stream","text":["\n","⚠️ 请选择 start date 和 end date，时间间隔建议至少 60 天以上（因使用 MA50）\n","\n","Enter stock ticker (e.g., AAPL): AAPL\n","Enter start date (YYYY-MM-DD): 2021-01-01\n","Enter end date (YYYY-MM-DD): 2022-01-01\n","Enter initial capital (e.g., 100): 100\n"]},{"output_type":"stream","name":"stderr","text":["\r[*********************100%***********************]  1 of 1 completed\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Log exported to AAPL_trade_log.csv\n"]}]}]}