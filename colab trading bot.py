{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyO4lFm6B1aJ5EswSBiDvDzh"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"b880gs4GEEpt","executionInfo":{"status":"ok","timestamp":1743695705229,"user_tz":240,"elapsed":4461,"user":{"displayName":"Freddy","userId":"16403082426040861433"}},"outputId":"ba26020f-632b-486d-9a66-b466ae09e04e"},"outputs":[{"output_type":"stream","name":"stdout","text":["✅ 已连接 Alpaca 模拟交易账户\n"]}],"source":["# 🔧 Cell 1 - 安装依赖 + 初始化 API\n","!pip install alpaca-trade-api yfinance matplotlib --quiet\n","\n","import pandas as pd\n","import time\n","import yfinance as yf\n","import matplotlib.pyplot as plt\n","from datetime import datetime, timedelta\n","from alpaca_trade_api import REST\n","\n","# ✅ Alpaca API 设置（模拟账户）\n","API_KEY = ''\n","SECRET_KEY = ''\n","BASE_URL = ''\n","\n","api = REST(API_KEY, SECRET_KEY, BASE_URL, api_version='v2')\n","\n","SYMBOL = 'AAPL'\n","INTERVAL_SECONDS = 60\n","INITIAL_CAPITAL = 10000\n","MAX_DRAWDOWN = 0.2\n","COOLDOWN_AFTER_LOSS = 3  # 连续亏损后冷却几轮\n","\n","print(\"✅ 已连接 Alpaca 模拟交易账户\")\n","\n","# 📊 Cell 2 - 获取历史数据（用于回测）\n","def get_backtest_data(symbol='AAPL', start='2023-01-01', end='2024-01-01'):\n","    df = yf.download(symbol, start=start, end=end, interval='1d')\n","    df = df[['Open', 'High', 'Low', 'Close', 'Volume']]\n","    df.columns = ['open', 'high', 'low', 'close', 'volume']\n","    return df\n","\n","# 📡 Cell 2B - 获取实时数据（用于实盘）\n","def get_live_data(symbol='AAPL', limit=100):\n","    bars = api.get_bars(symbol, timeframe='1Min', limit=limit)\n","    df = pd.DataFrame([{\n","        'time': bar.t,\n","        'open': bar.o,\n","        'high': bar.h,\n","        'low': bar.l,\n","        'close': bar.c,\n","        'volume': bar.v\n","    } for bar in bars])\n","    df.set_index('time', inplace=True)\n","    return df\n","\n","# 🧠 Cell 3 - 策略逻辑（通用）\n","def generate_signals(df):\n","    df['MA20'] = df['close'].rolling(window=20).mean()\n","    df['MA50'] = df['close'].rolling(window=50).mean()\n","    df['RSI'] = df['close'].diff().apply(lambda x: max(x, 0)).rolling(14).mean() / (\n","        df['close'].diff().abs().rolling(14).mean()) * 100\n","    ema12 = df['close'].ewm(span=12, adjust=False).mean()\n","    ema26 = df['close'].ewm(span=26, adjust=False).mean()\n","    df['MACD'] = ema12 - ema26\n","    df['SignalLine'] = df['MACD'].ewm(span=9, adjust=False).mean()\n","    df.dropna(inplace=True)\n","    return df\n","\n","# 🧪 Cell 4 - 回测模块\n","\n","def run_backtest(symbol='AAPL', save_csv=True, plot=True):\n","    df = get_backtest_data(symbol)\n","    df = generate_signals(df)\n","\n","    capital = INITIAL_CAPITAL\n","    position = 0\n","    buy_price = 0\n","    log = []\n","    equity_curve = []\n","\n","    for i in range(2, len(df)):\n","        row = df.iloc[i]\n","        prev = df.iloc[i - 1]\n","        date = df.index[i]\n","\n","        buy_signal = row['MA20'] > row['MA50'] and prev['MA20'] <= prev['MA50']\n","        sell_signal = row['MA20'] < row['MA50'] and prev['MA20'] >= prev['MA50']\n","\n","        if buy_signal and position == 0:\n","            position = capital // row['close']\n","            buy_price = row['close']\n","            capital -= position * buy_price\n","            log.append((date, 'BUY', buy_price, capital))\n","\n","        elif sell_signal and position > 0:\n","            capital += position * row['close']\n","            log.append((date, 'SELL', row['close'], capital))\n","            position = 0\n","\n","        total_equity = capital + position * row['close']\n","        equity_curve.append((date, total_equity))\n","\n","    if position > 0:\n","        capital += position * df.iloc[-1]['close']\n","        log.append((df.index[-1], 'SELL-END', df.iloc[-1]['close'], capital))\n","\n","    result = pd.DataFrame(log, columns=['Date', 'Action', 'Price', 'Capital'])\n","    equity = pd.DataFrame(equity_curve, columns=['Date', 'Equity']).set_index('Date')\n","\n","    if save_csv:\n","        result.to_csv(f\"{symbol}_backtest_log.csv\", index=False)\n","        equity.to_csv(f\"{symbol}_equity_curve.csv\")\n","\n","    if plot:\n","        plt.figure(figsize=(12,6))\n","        plt.plot(equity.index, equity['Equity'], label='Equity Curve')\n","        plt.title(f\"{symbol} 策略回测收益曲线\")\n","        plt.xlabel(\"Date\")\n","        plt.ylabel(\"Equity\")\n","        plt.legend()\n","        plt.grid(True)\n","        plt.show()\n","\n","    print(result)\n","    print(f\"📈 回测最终资产：${capital:.2f}，净收益：{capital - INITIAL_CAPITAL:.2f}\")\n","    return result\n","\n","#"]},{"cell_type":"code","source":[],"metadata":{"id":"zCfqSvotF04M"},"execution_count":null,"outputs":[]}]}